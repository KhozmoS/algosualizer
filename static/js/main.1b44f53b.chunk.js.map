{"version":3,"sources":["components/TopBar.tsx","store/shortest-path.store.ts","components/ShortestPathNode/ShortestPathNode.tsx","components/AlgoCard.tsx","assets/shortest.png","pages/Home.tsx","utilities/algorithms/bfs.ts","pages/ShortestPathVisual.tsx","App.tsx","utilities/global.theme.ts","index.tsx","reportWebVitals.ts"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","textAlign","logo","width","TopBar","classes","className","AppBar","position","Toolbar","Typography","variant","ROWS","COLS","start","BehaviorSubject","x","y","finish","grid","initGrid","gridStore","$grid","asObservable","$start","$finish","setGrid","newGrid","next","setStart","newStart","setFinish","newFinish","g","i","row","j","push","col","isStart","isFinish","node","height","outline","palette","secondary","main","ShortestPathNode","props","React","useState","setIsStart","isWall","setIsWall","isVisited","setIsVisited","isInPath","setIsInPath","useEffect","subs","subscribe","item","unsubscribe","extraClass","id","onMouseDown","e","stopPropagation","onMouseDownEvent","onMouseEnter","onMouseEnterEvent","onMouseUp","onMouseUpEvent","maxWidth","media","AlgoCard","Card","CardActionArea","CardMedia","image","CardContent","gutterBottom","component","algoName","CardActions","to","visuaLink","style","textDecoration","Button","size","color","paper","control","padding","algos","shortestImage","docLink","Home","Box","Grid","container","map","algo","xs","sm","md","lg","stepX","stepY","visitedNodes","pathNodes","getEmptyBooleanArray","rows","cols","visited","getEmptyParentMatrix","parentMatrix","isValidMove","length","setSolutionPath","parentsMatrix","tmp","parentNode","unshift","menu","background","primary","light","formControl","margin","minWidth","selectEmpty","marginTop","table","borderSpacing","ShortestPathVisual","age","setAge","mouseIsDown","setMouseIsDown","startSelected","setStartSelected","handleMouseDown","handleMouseUp","handleMouseEnter","handleRunAlgo","end","queue","shift","nwX","nwY","RunBfs","forEach","index","setTimeout","renderRow","FormControl","InputLabel","Select","labelId","value","onChange","event","target","label","MenuItem","onClick","cellSpacing","cellPadding","homeContainer","minHeight","home","App","path","globalTheme","createMuiTheme","teal","blue","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","onPerfEntry","undefined","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reportWebVitals"],"mappings":"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","file":"static/js/main.1b44f53b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport logo from \"../logo.svg\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    textAlign: 'center'\r\n  },\r\n  logo: {\r\n    width: 55,\r\n  }\r\n}));\r\n\r\nexport function TopBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>          \r\n          <Typography variant=\"h4\" className={classes.title}>\r\n            ALGOSUALIZER\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}","import { BehaviorSubject } from 'rxjs';\r\nimport { ShortestPathNodeProps } from \"../models\";\r\nimport { Point } from \"../models\";\r\nconst { ROWS, COLS } = { ROWS: 25, COLS: 50 } as { ROWS: number, COLS: number };\r\nconst START_ROW = 12;\r\nconst START_COL = 10;\r\nconst FINISH_ROW = 12;\r\nconst FINISH_COL = 40;\r\nconst start = new BehaviorSubject<Point>({x: START_ROW, y: START_COL});\r\nconst finish = new BehaviorSubject<Point>({x: FINISH_ROW, y: FINISH_COL});\r\nconst grid = new BehaviorSubject<ShortestPathNodeProps[][]>(initGrid());\r\n\r\nexport const gridStore = {\r\n  initGrid,\r\n  $grid: grid.asObservable(),\r\n  $start: start.asObservable(),\r\n  $finish: finish.asObservable(),\r\n  setGrid: (newGrid: ShortestPathNodeProps[][]) => grid.next(newGrid),\r\n  setStart: (newStart: Point) => start.next(newStart),\r\n  setFinish: (newFinish: Point) => finish.next(newFinish)\r\n};\r\n\r\n\r\nfunction initGrid() {\r\n  const g = [] as ShortestPathNodeProps[][];\r\n  for (let i = 0; i < ROWS; ++i)\r\n  {\r\n    let row = [] as ShortestPathNodeProps[];\r\n    for (let j = 0; j < COLS; ++j)\r\n    {\r\n      row.push({\r\n        row: i,\r\n        col: j,\r\n        isStart: i === START_ROW && j === START_COL,\r\n        isFinish: i === FINISH_ROW && j === FINISH_COL\r\n      } as ShortestPathNodeProps)\r\n    }\r\n    g.push(row);\r\n  }\r\n  return g;\r\n}","import React from 'react';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { ShortestPathNodeProps } from \"../../models\";\r\nimport { gridStore } from \"../../store\";\r\nimport './ShortestPathNode.css';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  node: {\r\n    width: 25,\r\n    height: 25,\r\n    outline: `thin solid ${theme.palette.secondary.main}`,    \r\n  }\r\n}));\r\n\r\nexport function ShortestPathNode(props: ShortestPathNodeProps) {\r\n  const [isStart, setIsStart] = React.useState(props.isStart);\r\n  const [isFinish, ] = React.useState(props.isFinish);\r\n  const [isWall, setIsWall] = React.useState(props.isWall);\r\n  const [isVisited, setIsVisited] = React.useState(props.isVisited);\r\n  const [isInPath, setIsInPath] = React.useState(props.isInPath);\r\n\r\n  React.useEffect(() => {\r\n    const subs = gridStore.$grid.subscribe((item) => {\r\n      if (item) {\r\n        setIsStart(item[props.row][props.col].isStart);\r\n        setIsWall(item[props.row][props.col].isWall);\r\n        setIsVisited(item[props.row][props.col].isVisited);\r\n        setIsInPath(item[props.row][props.col].isInPath);\r\n      }\r\n    });\r\n    return () => {\r\n      if (subs)\r\n        subs.unsubscribe();\r\n    };\r\n  })\r\n\r\n\r\n  const classes = useStyles();\r\n  const extraClass = (isStart ? 'node-start' : \r\n                      isFinish ? 'node-end' : \r\n                      isWall ? 'node-wall' : \r\n                      isVisited ? 'node-visited' : \r\n                      isInPath ? 'node-solution' : '');\r\n  return (\r\n    <td      \r\n      id={`node-${props.row}-${props.col}`}\r\n      className={`${classes.node} ${extraClass}`}\r\n      onMouseDown={(e) => { e.stopPropagation(); props.onMouseDownEvent(props.row, props.col); }}\r\n      onMouseEnter={(e) => { e.stopPropagation(); props.onMouseEnterEvent(props.row, props.col); }}\r\n      onMouseUp={() => props.onMouseUpEvent()}\r\n    >\r\n    </td>\r\n  );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { AlgoCardProps } from \"../models\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxWidth: 345,\r\n  },\r\n  media: {\r\n    height: 140,\r\n  },\r\n});\r\n\r\nexport function AlgoCard(props: AlgoCardProps) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image={props.image}\r\n          title=\"Contemplative Reptile\"\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            {props.algoName}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions>\r\n        <Link to={props.visuaLink} style={{textDecoration: 'none'}}>\r\n          <Button size=\"small\" color=\"primary\">\r\n            Visualize\r\n          </Button>\r\n        </Link>\r\n        <Button size=\"small\" color=\"primary\">\r\n          Learn More\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}","export default __webpack_public_path__ + \"static/media/shortest.1651674e.png\";","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Box } from '@material-ui/core';\r\nimport { AlgoCard } from \"../components\";\r\nimport shortestImage from \"../assets/shortest.png\";\r\nimport { AlgoCardProps } from \"../models\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    height: 140,\r\n    width: 100,\r\n  },\r\n  control: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst algos = [\r\n  {\r\n    image: shortestImage,\r\n    algoName: \"Shortest Path\",\r\n    docLink: \"docs\",\r\n    visuaLink: \"shortest-path-visual\"\r\n  }\r\n] as AlgoCardProps[]\r\n\r\nexport function Home() {\r\n  const classes = useStyles();\r\n  return (\r\n    <Box padding={10}>\r\n      <Grid container className={classes.root} spacing={2}>\r\n        {algos.map((algo) => (\r\n          <Grid key={algo.algoName} item xs={12} sm={6} md={4} lg={3} className={classes.control}>\r\n            <AlgoCard { ...algo }/>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </Box>\r\n  );\r\n}","import { ShortestPathNodeProps } from \"../../models\";\r\n\r\nconst stepX = [0, 1, 0, -1];\r\nconst stepY = [1, 0, -1, 0];\r\n\r\nlet visitedNodes = [] as ShortestPathNodeProps[];\r\nlet pathNodes = [] as ShortestPathNodeProps[];\r\ntype Point = { x: number, y: number };\r\n\r\nexport function RunBfs(grid:ShortestPathNodeProps[][], start: Point, end: Point) {\r\n  visitedNodes = [];\r\n  pathNodes = [];\r\n  const visited = getEmptyBooleanArray(grid.length, grid[0].length);\r\n  const parentsMatrix = getEmptyParentMatrix(grid.length, grid[0].length);\r\n  const queue = [] as ShortestPathNodeProps[];\r\n\r\n  queue.push(grid[start.x][start.y]);  \r\n  visited[start.x][start.y] = true;\r\n  while(queue.length > 0) {\r\n    const node = queue.shift() as ShortestPathNodeProps;    \r\n    for (let i = 0; i < 4; i++) {\r\n      const nwX = node.row + stepX[i];\r\n      const nwY = node.col + stepY[i];\r\n      if (isValidMove(nwX, nwY, grid, visited)) {\r\n        queue.push(grid[nwX][nwY]);\r\n        visited[nwX][nwY] = true;\r\n        // WE DONT INCLUDE START NODE IN PARENT MATRIX\r\n        parentsMatrix[nwX][nwY] = (node.row === start.x && node.col === start.y ? null : node);\r\n        if (nwX === end.x && nwY === end.y) {\r\n          setSolutionPath(parentsMatrix, end);\r\n          return [visitedNodes, pathNodes];\r\n        }\r\n        visitedNodes.push(grid[nwX][nwY]);\r\n      }\r\n    }\r\n  }\r\n  return [visitedNodes, pathNodes];\r\n}\r\n\r\n\r\nconst getEmptyBooleanArray = (rows: number, cols: number) => {\r\n  const visited = [] as boolean[][];\r\n  for (let i = 0; i < rows; i++) {\r\n    let row = [] as boolean[];\r\n    for (let j = 0; j < cols; j++) {\r\n      row.push(false);\r\n    }\r\n    visited.push(row);\r\n  }\r\n  return visited;\r\n}\r\nconst getEmptyParentMatrix = (rows: number, cols: number) => {\r\n  const parentMatrix = [] as (ShortestPathNodeProps| null)[][];\r\n  for (let i = 0; i < rows; i++) {\r\n    let row = [] as (ShortestPathNodeProps | null)[];\r\n    for (let j = 0; j < cols; j++) {\r\n      row.push(null);\r\n    }\r\n    parentMatrix.push(row);\r\n  }\r\n  return parentMatrix;\r\n}\r\nconst isValidMove = (\r\n    x: number, \r\n    y: number, \r\n    grid: ShortestPathNodeProps[][],\r\n    visited: boolean[][]\r\n  ): boolean => {\r\n  if (x < 0 || y < 0 || x >= grid.length || y >= grid[0].length) return false;\r\n  if (visited[x][y]) return false;  \r\n  if (grid[x][y].isWall) return false;\r\n  \r\n  return true;\r\n}\r\nconst setSolutionPath = (parentsMatrix: (ShortestPathNodeProps| null)[][], tmp: Point) => {  \r\n  while(parentsMatrix[tmp.x][tmp.y] !== null) {\r\n    const parentNode = parentsMatrix[tmp.x][tmp.y] as ShortestPathNodeProps;\r\n    pathNodes.unshift(parentNode);\r\n    tmp.x = parentNode.row as number;\r\n    tmp.y = parentNode.col as number;\r\n  }\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Box, Button, FormControl, InputLabel, MenuItem, Select, Theme } from '@material-ui/core';\r\nimport { ShortestPathNodeProps, Point } from \"../models\";\r\nimport { ShortestPathNode } from \"../components\";\r\nimport { RunBfs } from \"../utilities/algorithms/bfs\";\r\nimport { gridStore } from \"../store\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menu: {\r\n    background: theme.palette.primary.light,\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  table: {\r\n    borderSpacing: 0\r\n  }\r\n}));\r\n\r\nlet grid = gridStore.initGrid() as ShortestPathNodeProps[][];\r\nexport function ShortestPathVisual() {\r\n  const classes = useStyles();\r\n  const [age, setAge] = React.useState('');  \r\n  const [mouseIsDown, setMouseIsDown] = React.useState(false);\r\n  const [startSelected, setStartSelected] = React.useState(false);\r\n  const [start, setStart] = React.useState<Point>({ x: 0, y: 0 });\r\n  const [finish, setFinish] = React.useState<Point>({ x: 0, y: 0 });\r\n\r\n  React.useEffect(() => {\r\n    grid = gridStore.initGrid();\r\n    gridStore.setGrid(grid);\r\n    return () => {\r\n      gridStore.setGrid(gridStore.initGrid());\r\n    }\r\n  }, []);\r\n  React.useEffect(() => {\r\n    const subs = gridStore.$start.subscribe((start) => {\r\n      setStart(start);\r\n    });\r\n    return () => {\r\n      if (subs)\r\n        subs.unsubscribe();\r\n    };\r\n  }, []);\r\n  React.useEffect(() => {\r\n    const subs = gridStore.$finish.subscribe((finish) => {\r\n      setFinish(finish);\r\n    });\r\n    return () => {\r\n      if (subs)\r\n        subs.unsubscribe();\r\n    };\r\n  }, []);\r\n  function handleChange(event: React.ChangeEvent<{ value: unknown }>) {\r\n    setAge(event.target.value as string);\r\n  };\r\n  function handleMouseDown(row: number, col: number) {\r\n    setMouseIsDown(true);\r\n    if (grid[row][col].isStart) {\r\n      setStartSelected(true);\r\n    } else {\r\n      grid[row][col].isWall = true;\r\n    }\r\n    gridStore.setGrid(grid);\r\n  }\r\n  function handleMouseUp() {\r\n    setMouseIsDown(false);\r\n    setStartSelected(false);\r\n  }\r\n  function handleMouseEnter(row: number, col: number) {\r\n    if (!mouseIsDown) return;\r\n    if (startSelected) {\r\n      if (start) grid[start.x][start.y].isStart = false;\r\n      grid[row][col].isStart = true;\r\n      gridStore.setStart({x: row, y: col});\r\n    } else {\r\n      grid[row][col].isWall = true;\r\n    }\r\n    gridStore.setGrid(grid);\r\n  }\r\n  function handleRunAlgo() {\r\n    const [visitedNodes, pathNodes] = RunBfs(grid, start, finish);\r\n    visitedNodes.forEach((node, index) => {      \r\n      setTimeout(() => { \r\n        grid[node.row][node.col].isWall = false;\r\n        grid[node.row][node.col].isVisited = true;\r\n        gridStore.setGrid(grid);\r\n        if (index+1 === visitedNodes.length) {\r\n          paintSolutionPath(pathNodes);\r\n        }\r\n      }, index*10);\r\n    });\r\n  }\r\n  function renderRow(row: ShortestPathNodeProps[]) {\r\n    return row.map((props, index) => {\r\n      return (        \r\n        <ShortestPathNode\r\n          key={index}\r\n          { ...props } \r\n          onMouseDownEvent={handleMouseDown}\r\n          onMouseEnterEvent={handleMouseEnter}\r\n          onMouseUpEvent={handleMouseUp}\r\n        />         \r\n      )\r\n    })\r\n  }  \r\n  return (\r\n    <Box>\r\n      <Box className={classes.menu}>\r\n        <FormControl variant=\"outlined\" className={classes.formControl} size=\"small\">\r\n          <InputLabel id=\"demo-simple-select-outlined-label\">Algorithm</InputLabel>\r\n          <Select            \r\n            labelId=\"demo-simple-select-outlined-label\"\r\n            id=\"demo-simple-select-outlined\"\r\n            value={age}\r\n            onChange={handleChange}\r\n            label=\"Algorithm\"\r\n          >\r\n            <MenuItem value=\"\">\r\n              <em>None</em>\r\n            </MenuItem>\r\n            <MenuItem value={10}>Ten</MenuItem>\r\n            <MenuItem value={20}>Twenty</MenuItem>\r\n            <MenuItem value={30}>Thirty</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Box>\r\n      <Box>\r\n        <Box textAlign=\"center\" padding={2}>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={() => handleRunAlgo()}>\r\n            Start BFS\r\n          </Button>\r\n        </Box>\r\n        <table cellSpacing={0} cellPadding={0} style={{margin: '20px auto'}}>\r\n          <tbody>\r\n            { grid.map((row, index) => {\r\n              return (\r\n                <tr key={index}>\r\n                  { renderRow(row) }\r\n                </tr>\r\n              )\r\n            })}\r\n          </tbody>\r\n        </table>                                    \r\n      </Box>\r\n    </Box>\r\n  );\r\n  function paintSolutionPath(path: ShortestPathNodeProps[]) {\r\n    path.forEach((node, index) => {    \r\n      setTimeout(() => {\r\n        grid[node.row][node.col].isVisited = false;\r\n        grid[node.row][node.col].isWall = false;\r\n        grid[node.row][node.col].isInPath = true;\r\n        gridStore.setGrid(grid);\r\n      }, index*10)    \r\n    });\r\n  }\r\n}","import React from \"react\";\nimport { TopBar } from \"./components/TopBar\";\nimport { Home, ShortestPathVisual} from \"./pages\";\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from \"@material-ui/core\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route  \n} from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  homeContainer: {\n    minHeight: 'calc(100vh - 64px)',\n  },\n  home: {\n    margin: 'auto',\n    width: '100%'\n  }\n}));\nfunction App() {\n  const classes = useStyles();\n  return (\n    <>\n      <TopBar />\n      <Router>\n        <Box className={classes.homeContainer}>\n        <Switch>\n          <Route path=\"/algosualizer/shortest-path-visual\">\n            <ShortestPathVisual />\n          </Route>\n          <Route path=\"/algosualizer\">\n            <Box className={classes.home}>\n              <Home />              \n            </Box>\n          </Route>          \n        </Switch>\n        </Box>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","import { createMuiTheme } from \"@material-ui/core\";\r\nimport { teal, blue } from \"@material-ui/core/colors\";\r\n\r\nconst globalTheme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: teal[400],\r\n      light: teal[50]\r\n    },\r\n    secondary: {\r\n      main: blue[100],\r\n    },\r\n  },\r\n});\r\n\r\nexport default globalTheme;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from '@material-ui/core';\nimport theme from \"./utilities/global.theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { ReportHandler } from 'web-vitals';\n\nexport default function reportWebVitals(onPerfEntry = undefined as undefined | ReportHandler) {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\n"],"sourceRoot":""}