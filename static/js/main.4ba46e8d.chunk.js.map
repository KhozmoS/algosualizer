{"version":3,"sources":["models/index.ts","models/Algorithm.ts","components/TopBar.tsx","store/shortest-path.store.ts","components/ShortestPathNode/ShortestPathNode.tsx","components/AlgoCard.tsx","assets/shortest.png","pages/Home.tsx","utilities/algorithms/shared.ts","utilities/algorithms/dijkstra.ts","utilities/algorithms/bfs.ts","pages/ShortestPathVisual.tsx","App.tsx","utilities/global.theme.ts","index.tsx","reportWebVitals.ts"],"names":["Algorithm","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","textAlign","logo","width","TopBar","classes","className","AppBar","position","Toolbar","Typography","variant","ROWS","COLS","start","BehaviorSubject","x","y","finish","grid","initGrid","gridStore","randomGridWeigths","next","g","i","row","j","push","col","isStart","isFinish","weigth","Math","floor","random","$grid","asObservable","$start","$finish","setGrid","newGrid","setStart","newStart","setFinish","newFinish","node","height","outline","palette","secondary","main","fontSize","ShortestPathNode","props","React","useState","setIsStart","setIsFinish","isWall","setIsWall","isVisited","setIsVisited","isInPath","setIsInPath","setWeigth","useEffect","subs","subscribe","item","unsubscribe","extraClass","id","onMouseDown","e","preventDefault","onMouseDownEvent","onMouseEnter","onMouseEnterEvent","onMouseUp","onMouseUpEvent","maxWidth","media","AlgoCard","Card","CardActionArea","CardMedia","image","CardContent","gutterBottom","component","algoName","CardActions","to","visuaLink","style","textDecoration","Button","size","color","paper","control","padding","algos","shortestImage","docLink","Home","Box","Grid","container","map","algo","xs","sm","md","lg","getEmptyParentMatrix","rows","cols","parentMatrix","getSolutionPath","parentsMatrix","tmp","pathNodes","parentNode","unshift","isValidMove","visited","length","stepX","stepY","visitedNodes","menu","background","primary","light","formControl","minWidth","backgroundColor","selectEmpty","marginTop","table","borderSpacing","ShortestPathVisual","setAlgo","mouseIsDown","setMouseIsDown","startSelected","setStartSelected","finishSelected","setFinishSelected","reestartGrid","v","DIJKSTRA","handleMouseDown","handleMouseUp","handleMouseEnter","runSelectedAlgo","BFS","end","getEmptyBooleanArray","queue","shift","nwX","nwY","RunBfs","cost","initCostToInfinite","RunDijkstra","handleRunAlgo","forEach","index","setTimeout","renderRow","FormControl","InputLabel","Select","labelId","value","onChange","event","target","label","MenuItem","IconButton","onClick","Refresh","cellSpacing","cellPadding","margin","homeContainer","minHeight","home","App","path","globalTheme","createMuiTheme","teal","blue","ReactDOM","render","ThemeProvider","document","getElementById","onPerfEntry","undefined","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reportWebVitals"],"mappings":"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","file":"static/js/main.4ba46e8d.chunk.js","sourcesContent":["export * from \"./AlgoCardProps\";\r\nexport * from \"./ShortestPathNodeProps\";\r\nexport * from \"./Point\";\r\nexport * from \"./Algorithm\";","export enum Algorithm {\r\n  BFS = 'BFS',\r\n  DIJKSTRA = 'Dijkstra',\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport logo from \"../logo.svg\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    textAlign: 'center'\r\n  },\r\n  logo: {\r\n    width: 55,\r\n  }\r\n}));\r\n\r\nexport function TopBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>          \r\n          <Typography variant=\"h4\" className={classes.title}>\r\n            ALGOSUALIZER\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}","import { BehaviorSubject } from 'rxjs';\r\nimport { ShortestPathNodeProps } from \"../models\";\r\nimport { Point } from \"../models\";\r\nconst { ROWS, COLS } = { ROWS: 25, COLS: 50 } as { ROWS: number, COLS: number };\r\nconst START_ROW = 12;\r\nconst START_COL = 10;\r\nconst FINISH_ROW = 12;\r\nconst FINISH_COL = 40;\r\nconst start = new BehaviorSubject<Point>({x: START_ROW, y: START_COL});\r\nconst finish = new BehaviorSubject<Point>({x: FINISH_ROW, y: FINISH_COL});\r\nconst grid = new BehaviorSubject<ShortestPathNodeProps[][]>(initGrid());\r\n\r\nexport const gridStore = {\r\n  initGrid,\r\n  randomGridWeigths,\r\n  $grid: grid.asObservable(),\r\n  $start: start.asObservable(),\r\n  $finish: finish.asObservable(),\r\n  setGrid: (newGrid: ShortestPathNodeProps[][]) => grid.next(newGrid),\r\n  setStart: (newStart: Point) => start.next(newStart),\r\n  setFinish: (newFinish: Point) => finish.next(newFinish)\r\n};\r\n\r\n\r\nfunction initGrid() {\r\n  start.next({ x: START_ROW, y: START_COL });\r\n  finish.next({ x: FINISH_ROW, y: FINISH_COL });\r\n  const g = [] as ShortestPathNodeProps[][];\r\n  for (let i = 0; i < ROWS; ++i)\r\n  {\r\n    let row = [] as ShortestPathNodeProps[];\r\n    for (let j = 0; j < COLS; ++j)\r\n    {\r\n      row.push({\r\n        row: i,\r\n        col: j,\r\n        isStart: i === START_ROW && j === START_COL,\r\n        isFinish: i === FINISH_ROW && j === FINISH_COL,\r\n        weigth: 0\r\n      } as ShortestPathNodeProps)\r\n    }\r\n    g.push(row);\r\n  }\r\n  return g;\r\n}\r\nfunction randomGridWeigths() {\r\n  start.next({ x: START_ROW, y: START_COL });\r\n  finish.next({ x: FINISH_ROW, y: FINISH_COL });\r\n  const g = [] as ShortestPathNodeProps[][];\r\n  for (let i = 0; i < ROWS; ++i)\r\n  {\r\n    let row = [] as ShortestPathNodeProps[];\r\n    for (let j = 0; j < COLS; ++j)\r\n    {\r\n      row.push({\r\n        row: i,\r\n        col: j,\r\n        isStart: i === START_ROW && j === START_COL,\r\n        isFinish: i === FINISH_ROW && j === FINISH_COL,\r\n        weigth: Math.floor(Math.random() * 99) + 1\r\n      } as ShortestPathNodeProps)\r\n    }\r\n    g.push(row);\r\n  }\r\n  return g;\r\n}","import React from 'react';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { ShortestPathNodeProps } from \"../../models\";\r\nimport { gridStore } from \"../../store\";\r\nimport './ShortestPathNode.css';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  node: {\r\n    width: 25,\r\n    height: 25,\r\n    outline: `thin solid ${theme.palette.secondary.main}`,\r\n    fontSize: 7.5,\r\n    textAlign: \"center\",\r\n  }\r\n}));\r\n\r\nexport function ShortestPathNode(props: ShortestPathNodeProps) {\r\n  const [isStart, setIsStart] = React.useState(props.isStart);\r\n  const [isFinish, setIsFinish] = React.useState(props.isFinish);\r\n  const [isWall, setIsWall] = React.useState(props.isWall);\r\n  const [isVisited, setIsVisited] = React.useState(props.isVisited);\r\n  const [isInPath, setIsInPath] = React.useState(props.isInPath);\r\n  const [weigth, setWeigth] = React.useState(props.weigth);\r\n  React.useEffect(() => {\r\n    const subs = gridStore.$grid.subscribe((item) => {\r\n      if (item) {\r\n        setIsStart(item[props.row][props.col].isStart);\r\n        setIsFinish(item[props.row][props.col].isFinish);\r\n        setIsWall(item[props.row][props.col].isWall);\r\n        setIsVisited(item[props.row][props.col].isVisited);\r\n        setIsInPath(item[props.row][props.col].isInPath);\r\n        setWeigth(item[props.row][props.col].weigth);\r\n      }\r\n    });\r\n    return () => {\r\n      if (subs)\r\n        subs.unsubscribe();\r\n    };\r\n  })\r\n\r\n\r\n  const classes = useStyles();\r\n  const extraClass = (isStart ? 'node-start' : \r\n                      isFinish ? 'node-end' : \r\n                      isWall ? 'node-wall' : \r\n                      isVisited ? 'node-visited' : \r\n                      isInPath ? 'node-solution' : '');\r\n  return (\r\n    <td      \r\n      id={`node-${props.row}-${props.col}`}\r\n      className={`${classes.node} ${extraClass}`}\r\n      onMouseDown={(e) => { e.preventDefault(); props.onMouseDownEvent(props.row, props.col); }}\r\n      onMouseEnter={(e) => { e.preventDefault(); props.onMouseEnterEvent(props.row, props.col); }}\r\n      onMouseUp={(e) => { e.preventDefault(); props.onMouseUpEvent();}}\r\n    >\r\n      {weigth && !isWall && !isStart && !isFinish ? weigth : ''}\r\n    </td>\r\n  );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { AlgoCardProps } from \"../models\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxWidth: 345,\r\n  },\r\n  media: {\r\n    height: 140,\r\n  },\r\n});\r\n\r\nexport function AlgoCard(props: AlgoCardProps) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image={props.image}\r\n          title=\"Contemplative Reptile\"\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            {props.algoName}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions>\r\n        <Link to={props.visuaLink} style={{textDecoration: 'none'}}>\r\n          <Button size=\"small\" color=\"primary\">\r\n            Visualize\r\n          </Button>\r\n        </Link>\r\n        <Button size=\"small\" color=\"primary\">\r\n          Learn More\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}","export default __webpack_public_path__ + \"static/media/shortest.1651674e.png\";","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Box } from '@material-ui/core';\r\nimport { AlgoCard } from \"../components\";\r\nimport shortestImage from \"../assets/shortest.png\";\r\nimport { AlgoCardProps } from \"../models\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    height: 140,\r\n    width: 100,\r\n  },\r\n  control: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst algos = [\r\n  {\r\n    image: shortestImage,\r\n    algoName: \"Shortest Path\",\r\n    docLink: \"docs\",\r\n    visuaLink: \"shortest-path-visual\"\r\n  }\r\n] as AlgoCardProps[]\r\n\r\nexport function Home() {\r\n  const classes = useStyles();\r\n  return (\r\n    <Box padding={10}>\r\n      <Grid container className={classes.root} spacing={2}>\r\n        {algos.map((algo) => (\r\n          <Grid key={algo.algoName} item xs={12} sm={6} md={4} lg={3} className={classes.control}>\r\n            <AlgoCard { ...algo }/>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </Box>\r\n  );\r\n}","import { ShortestPathNodeProps, Point } from \"../../models\";\r\n\r\nexport const getEmptyBooleanArray = (rows: number, cols: number) => {\r\n  const visited = [] as boolean[][];\r\n  for (let i = 0; i < rows; i++) {\r\n    let row = [] as boolean[];\r\n    for (let j = 0; j < cols; j++) {\r\n      row.push(false);\r\n    }\r\n    visited.push(row);\r\n  }\r\n  return visited;\r\n}\r\nexport const getEmptyParentMatrix = (rows: number, cols: number) => {\r\n  const parentMatrix = [] as (ShortestPathNodeProps| null)[][];\r\n  for (let i = 0; i < rows; i++) {\r\n    let row = [] as (ShortestPathNodeProps | null)[];\r\n    for (let j = 0; j < cols; j++) {\r\n      row.push(null);\r\n    }\r\n    parentMatrix.push(row);\r\n  }\r\n  return parentMatrix;\r\n}\r\nexport const getSolutionPath = (\r\n    parentsMatrix: (ShortestPathNodeProps| null)[][], \r\n    tmp: Point\r\n  ) => {\r\n  const pathNodes = [] as ShortestPathNodeProps[];\r\n  while(parentsMatrix[tmp.x][tmp.y] !== null) {\r\n    const parentNode = parentsMatrix[tmp.x][tmp.y] as ShortestPathNodeProps;\r\n    pathNodes.unshift(parentNode);\r\n    tmp.x = parentNode.row as number;\r\n    tmp.y = parentNode.col as number;\r\n  }\r\n  return pathNodes;\r\n}\r\nexport const isValidMove = (\r\n    x: number, \r\n    y: number, \r\n    grid: ShortestPathNodeProps[][],\r\n    visited?: boolean[][]\r\n  ): boolean => {\r\n  if (x < 0 || y < 0 || x >= grid.length || y >= grid[0].length) return false;\r\n  if (visited && visited[x][y]) return false;\r\n  if (grid[x][y].isStart || grid[x][y].isFinish) return true;\r\n  if (grid[x][y].isWall) return false;\r\n  \r\n  return true;\r\n}\r\nexport const initCostToInfinite = (rows: number, cols: number) => {\r\n  const cost = [];\r\n  for (let i = 0; i < rows; i++) {\r\n    let row = [] as number[];\r\n    for (let j = 0; j < cols; j++)\r\n      row.push(10000000000);\r\n    cost.push(row);\r\n  }\r\n  return cost;\r\n}","import { ShortestPathNodeProps, Point } from \"../../models\";\r\nimport { getEmptyParentMatrix, initCostToInfinite, isValidMove, getSolutionPath } from \"./shared\";\r\nconst stepX = [0, 1, 0, -1];\r\nconst stepY = [1, 0, -1, 0];\r\n\r\nlet visitedNodes = [] as ShortestPathNodeProps[];\r\nlet pathNodes = [] as ShortestPathNodeProps[];\r\n\r\nexport function RunDijkstra(grid:ShortestPathNodeProps[][], start: Point, end: Point) {\r\n  pathNodes = [];\r\n  visitedNodes = [];\r\n  const cost = initCostToInfinite(grid.length, grid[0].length);\r\n  const parentsMatrix = getEmptyParentMatrix(grid.length, grid[0].length);\r\n  const queue = [] as ShortestPathNodeProps[];\r\n  queue.push(grid[start.x][start.y]);\r\n  cost[start.x][start.y] = 0;\r\n  while(queue.length > 0) {\r\n    const node = queue.shift() as ShortestPathNodeProps;\r\n    for (let i = 0; i < 4; i++) {\r\n      const nwX = node.row + stepX[i];\r\n      const nwY = node.col + stepY[i];\r\n      // console.log(cost[node.row][node.col] + grid[nwX][nwY].weigth);\r\n      if (\r\n          isValidMove(nwX, nwY, grid) && \r\n          cost[node.row][node.col] + grid[nwX][nwY].weigth < cost[nwX][nwY]\r\n        ) {\r\n        cost[nwX][nwY] = cost[node.row][node.col] + grid[nwX][nwY].weigth;\r\n        // console.log(grid[nwX][nwY].weigth);\r\n        queue.push(grid[nwX][nwY]);        \r\n        // WE DONT INCLUDE START NODE IN PARENT MATRIX\r\n        parentsMatrix[nwX][nwY] = (node.row === start.x && node.col === start.y ? null : node);        \r\n        visitedNodes.push(grid[nwX][nwY]);\r\n      }\r\n    }\r\n  }  \r\n  pathNodes = getSolutionPath(parentsMatrix, end);\r\n  return [visitedNodes, pathNodes];\r\n}","import { ShortestPathNodeProps } from \"../../models\";\r\nimport { getEmptyBooleanArray, isValidMove, getEmptyParentMatrix, getSolutionPath } from \"./shared\";\r\nconst stepX = [0, 1, 0, -1];\r\nconst stepY = [1, 0, -1, 0];\r\n\r\nlet visitedNodes = [] as ShortestPathNodeProps[];\r\nlet pathNodes = [] as ShortestPathNodeProps[];\r\ntype Point = { x: number, y: number };\r\n\r\nexport function RunBfs(grid:ShortestPathNodeProps[][], start: Point, end: Point) {\r\n  visitedNodes = [];\r\n  pathNodes = [];\r\n  const visited = getEmptyBooleanArray(grid.length, grid[0].length);\r\n  const parentsMatrix = getEmptyParentMatrix(grid.length, grid[0].length);\r\n  const queue = [] as ShortestPathNodeProps[];\r\n\r\n  queue.push(grid[start.x][start.y]);  \r\n  visited[start.x][start.y] = true;\r\n  while(queue.length > 0) {\r\n    const node = queue.shift() as ShortestPathNodeProps;    \r\n    for (let i = 0; i < 4; i++) {\r\n      const nwX = node.row + stepX[i];\r\n      const nwY = node.col + stepY[i];\r\n      if (isValidMove(nwX, nwY, grid, visited)) {\r\n        queue.push(grid[nwX][nwY]);\r\n        visited[nwX][nwY] = true;\r\n        // WE DONT INCLUDE START NODE IN PARENT MATRIX\r\n        parentsMatrix[nwX][nwY] = (node.row === start.x && node.col === start.y ? null : node);\r\n        if (nwX === end.x && nwY === end.y) {\r\n          pathNodes = getSolutionPath(parentsMatrix, end);\r\n          return [visitedNodes, pathNodes];\r\n        }\r\n        visitedNodes.push(grid[nwX][nwY]);\r\n      }\r\n    }\r\n  }\r\n  return [visitedNodes, pathNodes];\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { \r\n  Box, \r\n  Button, \r\n  FormControl, \r\n  Grid, \r\n  InputLabel, \r\n  MenuItem, \r\n  Select, \r\n  Theme,\r\n  IconButton\r\n} from '@material-ui/core';\r\nimport { Refresh } from \"@material-ui/icons\";\r\nimport { ShortestPathNodeProps, Point, Algorithm } from \"../models\";\r\nimport { ShortestPathNode } from \"../components\";\r\nimport { RunBfs, RunDijkstra } from \"../utilities/algorithms\";\r\nimport { gridStore } from \"../store\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menu: {\r\n    background: theme.palette.primary.light,\r\n  },\r\n  formControl: {\r\n    minWidth: 200,\r\n    backgroundColor: \"#ffffff\"\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  table: {\r\n    borderSpacing: 0\r\n  }\r\n}));\r\n\r\nlet grid = gridStore.initGrid() as ShortestPathNodeProps[][];\r\nexport function ShortestPathVisual() {\r\n  const classes = useStyles();\r\n  const [algo, setAlgo] = React.useState<Algorithm|''>('');\r\n  const [mouseIsDown, setMouseIsDown] = React.useState(false);\r\n  const [startSelected, setStartSelected] = React.useState(false);\r\n  const [finishSelected, setFinishSelected] = React.useState(false);\r\n  const [start, setStart] = React.useState<Point>({ x: 0, y: 0 });\r\n  const [finish, setFinish] = React.useState<Point>({ x: 0, y: 0 });\r\n\r\n  React.useEffect(() => {\r\n    grid = gridStore.initGrid();\r\n    gridStore.setGrid(grid);\r\n    return () => {\r\n      gridStore.setGrid(gridStore.initGrid());\r\n    }\r\n  }, []);\r\n  React.useEffect(() => {\r\n    const subs = gridStore.$start.subscribe((start) => {\r\n      setStart(start);\r\n    });\r\n    return () => {\r\n      if (subs)\r\n        subs.unsubscribe();\r\n    };\r\n  }, []);\r\n  React.useEffect(() => {\r\n    const subs = gridStore.$finish.subscribe((finish) => {\r\n      setFinish(finish);\r\n    });\r\n    return () => {\r\n      if (subs)\r\n        subs.unsubscribe();\r\n    };\r\n  }, []);\r\n  function reestartGrid(v: Algorithm) {\r\n    if (v === Algorithm.DIJKSTRA) {\r\n      grid = gridStore.randomGridWeigths();\r\n      gridStore.setGrid(grid);\r\n    } else {\r\n      grid = gridStore.initGrid();\r\n      gridStore.setGrid(grid);\r\n    }    \r\n  }\r\n  function handleChange(event: React.ChangeEvent<{ value: unknown }>) {\r\n    const v = event.target.value;\r\n    setAlgo(v as Algorithm);    \r\n    reestartGrid(v);\r\n  };\r\n  function handleMouseDown(row: number, col: number) {\r\n    setMouseIsDown(true);\r\n    if (grid[row][col].isStart) {\r\n      setStartSelected(true);\r\n    } else if (grid[row][col].isFinish) {\r\n      setFinishSelected(true);\r\n    } else {\r\n      grid[row][col].isWall = true;\r\n    }\r\n    gridStore.setGrid(grid);\r\n  }\r\n  function handleMouseUp() {\r\n    setMouseIsDown(false);\r\n    setStartSelected(false);\r\n    setFinishSelected(false);\r\n  }\r\n  function handleMouseEnter(row: number, col: number) {\r\n    if (!mouseIsDown) return;\r\n    if (startSelected && !grid[row][col].isFinish) {\r\n      if (start) grid[start.x][start.y].isStart = false;\r\n      grid[row][col].isStart = true;\r\n      gridStore.setStart({x: row, y: col});\r\n    } else if (finishSelected && !grid[row][col].isStart) {\r\n      if (finish) grid[finish.x][finish.y].isFinish = false;\r\n      grid[row][col].isFinish = true;\r\n      gridStore.setFinish({x: row, y: col});\r\n    } else {\r\n      grid[row][col].isWall = true;\r\n    }\r\n    gridStore.setGrid(grid);\r\n  }\r\n  function runSelectedAlgo() {\r\n    switch (algo) {\r\n      case Algorithm.BFS:\r\n        return RunBfs(grid, start, finish);\r\n      case Algorithm.DIJKSTRA:\r\n        return RunDijkstra(grid, start, finish);\r\n      default:\r\n        return [[], []];\r\n    }\r\n  }\r\n  function handleRunAlgo() {\r\n    const [visitedNodes, pathNodes] = runSelectedAlgo();\r\n    visitedNodes.forEach((node, index) => {      \r\n      setTimeout(() => { \r\n        grid[node.row][node.col].isWall = false;\r\n        grid[node.row][node.col].isVisited = true;\r\n        gridStore.setGrid(grid);\r\n        if (index+1 === visitedNodes.length) {\r\n          paintSolutionPath(pathNodes);\r\n        }\r\n      }, index*10);\r\n    });\r\n  }\r\n  function renderRow(row: ShortestPathNodeProps[]) {\r\n    return row.map((props, index) => {\r\n      return (        \r\n        <ShortestPathNode\r\n          key={index}\r\n          { ...props } \r\n          onMouseDownEvent={handleMouseDown}\r\n          onMouseEnterEvent={handleMouseEnter}\r\n          onMouseUpEvent={handleMouseUp}\r\n        />         \r\n      )\r\n    })\r\n  }  \r\n  return (\r\n    <Box>\r\n      <Box className={classes.menu}>\r\n        <Grid container>\r\n          <Grid item xs={6}>\r\n            <Box padding={1}>\r\n              <FormControl\r\n                variant=\"filled\" \r\n                className={classes.formControl} \r\n                size=\"small\"\r\n              >\r\n                <InputLabel id=\"algo-select-label\">Algorithm</InputLabel>\r\n                <Select\r\n                  labelId=\"algo-select-label\"\r\n                  id=\"algo-select\"\r\n                  value={algo}\r\n                  onChange={handleChange}\r\n                  label=\"Algorithm\"\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  <MenuItem value={Algorithm.BFS}>\r\n                    {Algorithm.BFS}\r\n                  </MenuItem>\r\n                  <MenuItem value={Algorithm.DIJKSTRA}>\r\n                    {Algorithm.DIJKSTRA}\r\n                  </MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Box padding={1} style={{textAlign: \"right\"}}>\r\n              <IconButton onClick={() => reestartGrid(algo as Algorithm)}>\r\n                <Refresh></Refresh>\r\n              </IconButton>\r\n              <Button\r\n                variant=\"contained\" \r\n                color=\"primary\" \r\n                onClick={() => handleRunAlgo()}\r\n              >\r\n                RUN\r\n              </Button>\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n      <Box>\r\n        <table cellSpacing={0} cellPadding={0} style={{margin: '20px auto'}}>\r\n          <tbody>\r\n            { grid.map((row, index) => {\r\n              return (\r\n                <tr key={index}>\r\n                  { renderRow(row) }\r\n                </tr>\r\n              )\r\n            })}\r\n          </tbody>\r\n        </table>                                    \r\n      </Box>\r\n    </Box>\r\n  );\r\n  function paintSolutionPath(path: ShortestPathNodeProps[]) {\r\n    path.forEach((node, index) => {    \r\n      setTimeout(() => {\r\n        grid[node.row][node.col].isVisited = false;\r\n        grid[node.row][node.col].isWall = false;\r\n        grid[node.row][node.col].isInPath = true;\r\n        gridStore.setGrid(grid);\r\n      }, index*10)    \r\n    });\r\n  }\r\n}","import React from \"react\";\nimport { TopBar } from \"./components/TopBar\";\nimport { Home, ShortestPathVisual} from \"./pages\";\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from \"@material-ui/core\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route  \n} from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  homeContainer: {\n    minHeight: 'calc(100vh - 64px)',\n  },\n  home: {\n    margin: 'auto',\n    width: '100%'\n  }\n}));\nfunction App() {\n  const classes = useStyles();\n  return (\n    <>\n      <TopBar />\n      <Router>\n        <Box className={classes.homeContainer}>\n        <Switch>\n          <Route path=\"/algosualizer/shortest-path-visual\">\n            <ShortestPathVisual />\n          </Route>\n          <Route path=\"/algosualizer\">\n            <Box className={classes.home}>\n              <Home />              \n            </Box>\n          </Route>          \n        </Switch>\n        </Box>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","import { createMuiTheme } from \"@material-ui/core\";\r\nimport { teal, blue } from \"@material-ui/core/colors\";\r\n\r\nconst globalTheme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: teal[400],\r\n      light: teal[50]\r\n    },\r\n    secondary: {\r\n      main: blue[100],\r\n    },\r\n  },\r\n});\r\n\r\nexport default globalTheme;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from '@material-ui/core';\nimport theme from \"./utilities/global.theme\";\n\n\nReactDOM.render(  \n  <ThemeProvider theme={theme}>\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { ReportHandler } from 'web-vitals';\n\nexport default function reportWebVitals(onPerfEntry = undefined as undefined | ReportHandler) {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\n"],"sourceRoot":""}